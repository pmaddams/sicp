#lang sicp

(define (make-queue)
  (let* ((front-ptr '())
         (rear-ptr '())
         (insert! (lambda (item)
                    (let ((new-pair (cons item '())))
                      (if (null? front-ptr)
                          (set! front-ptr new-pair)
                          (set-cdr! rear-ptr new-pair))
                      (set! rear-ptr new-pair))))
         (delete! (lambda ()
                    (if (null? front-ptr)
                        (error "make-queue: delete!: empty queue")
                        (set! front-ptr (cdr front-ptr)))))
         (print (lambda ()
                  (display front-ptr)
                  (newline)))
         (dispatch (lambda (m)
                     (cond ((eq? m 'insert!) insert!)
                           ((eq? m 'delete!) delete!)
                           ((eq? m 'print) print)
                           (else (error "make-queue: undefined operation:" m))))))
    dispatch))

(define (insert-queue! q item)
  ((q 'insert!) item))

(define (delete-queue! q)
  ((q 'delete!)))

(define (print-queue q)
  ((q 'print)))

(let ((q1 (make-queue)))
  (insert-queue! q1 'a)
  (print-queue q1)
  (insert-queue! q1 'b)
  (print-queue q1)
  (delete-queue! q1)
  (print-queue q1)
  (delete-queue! q1)
  (print-queue q1))
;; (a)
;; (a b)
;; (b)
;; ()