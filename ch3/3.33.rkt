#lang sicp

(define (for-each-except x proc l)
  (letrec ((f (lambda (l)
                (if (not (null? l))
                    (begin (if (not (eq? (car l) x))
                               (proc (car l)))
                           (f (cdr l)))))))
    (f l)))

(define (tell-receive constraint)
  (constraint 'receive))

(define (tell-refresh constraint)
  (constraint 'refresh))

(define (make-connector)
  (let* ((value #f)
         (informant #f)
         (constraints #f)
         (has-value? (lambda ()
                       (not (eq? informant #f))))
         (set-value! (lambda (n source)
                      (cond ((not (has-value?))
                             (set! value n)
                             (set! informant source)
                             (for-each-except source
                                              tell-receive
                                              constraints))
                            ((not (= value n))
                             (error "connector: set-value!: contradiction:"
                                    (list value n))))))
         (forget-value! (lambda (source)
                         (if (eq? source informant)
                             (begin (set! informant #f)
                                    (for-each-except source
                                                     tell-refresh
                                                     constraints)))))
         (connect (lambda (c)
                    (if (not (memq c constraints))
                        (set! constraints
                              (cons c constraints)))
                    (if (has-value?)
                        (tell-receive c))))
         (dispatch (lambda (m)
                     (case m
                       ('get-value value)
                       ('has-value? (has-value?))
                       ('set-value! set-value!)
                       ('forget-value! forget-value!)
                       ('connect connect)
                       (else (error "connector: unknown method:" m))))))
    dispatch))

(define (get-value connector)
  (connector 'get-value))

(define (has-value? connector)
  (connector 'has-value?))

(define (set-value! connector n source)
  ((connector 'set-value!) n source))

(define (forget-value! connector source)
  ((connector 'forget-value!) source))

(define (connect connector c)
  ((connector 'connect) c))

(define (adder sum x y)
  (letrec ((receive (lambda ()
                      (cond ((and (has-value? x)
                                  (has-value? y))
                             (set-value! sum
                                         (+ (get-value x)
                                            (get-value y))))
                            ((and (has-value? x)
                                  (has-value? sum))
                             (set-value! sum
                                         (- (get-value sum)
                                            (get-value x))))
                            ((and (has-value? y)
                                  (has-value? sum))
                             (set-value! sum
                                         (- (get-value sum)
                                            (get-value y)))))))
           (refresh (lambda ()
                      (forget-value! sum dispatch)
                      (forget-value! x dispatch)
                      (forget-value! y dispatch)
                      (receive)))
           (dispatch (lambda (m)
                       (case m
                         ('receive (receive))
                         ('refresh (refresh))
                         (else (error "adder: unknown method:" m))))))
    (connect sum dispatch)
    (connect x dispatch)
    (connect y dispatch)
    dispatch))

(define (multiplier product x y)
  (letrec ((receive (lambda ()
                      (cond ((and (has-value? x)
                                  (has-value? y))
                             (set-value! product
                                         (* (get-value x)
                                            (get-value y))))
                            ((and (has-value? x)
                                  (has-value? product))
                             (set-value! product
                                         (/ (get-value product)
                                            (get-value x))))
                            ((and (has-value? y)
                                  (has-value? product))
                             (set-value! product
                                         (/ (get-value product)
                                            (get-value y)))))))
           (refresh (lambda ()
                      (forget-value! product dispatch)
                      (forget-value! x dispatch)
                      (forget-value! y dispatch)
                      (receive)))
           (dispatch (lambda (m)
                       (case m
                         ('receive (receive))
                         ('refresh (refresh))
                         (else (error "multiplier: unknown method:" m))))))
    (connect product dispatch)
    (connect x dispatch)
    (connect y dispatch)
    dispatch))

(define (averager mean x y)
  (letrec ((receive (lambda ()
                      (cond ((and (has-value? x)
                                  (has-value? y))
                             (set-value! mean
                                         (/ (+ (get-value x)
                                               (get-value y))
                                            2)))
                            ((and (has-value? x)
                                  (has-value? mean))
                             (set-value! mean
                                         (- (* (get-value mean)
                                               2)
                                            (get-value x))))
                            ((and (has-value? y)
                                  (has-value? mean))
                             (set-value! mean
                                         (- (* (get-value mean)
                                               2)
                                            (get-value y)))))))
           (refresh (lambda ()
                      (forget-value! mean dispatch)
                      (forget-value! x dispatch)
                      (forget-value! y dispatch)
                      (receive)))
           (dispatch (lambda (m)
                       (case m
                         ('receive (receive))
                         ('refresh (refresh))
                         (else (error "averager: unknown method:" m))))))
    (connect mean dispatch)
    (connect x dispatch)
    (connect y dispatch)
    dispatch))
