#lang sicp

(define (for-each-except exception proc l)
  (letrec ((f (lambda (items)
                (cond ((null? items) 'done)
                      ((eq? (car items) exception) (f (cdr items)))
                      (else (proc (car items))
                            (f (cdr items)))))))
    (f l)))

(define (inform-about-value constraint)
  (constraint 'I-have-a-value))

(define (inform-about-no-value constraint)
  (constraint 'I-lost-my-value))

(define (make-connector)
  (letrec ((value #f)
           (informant #f)
           (constraints '())
           (set-my-value (lambda (newval setter)
                           (cond ((not (has-value? me))
                                  (set! value newval)
                                  (set! informant setter)
                                  (for-each-except setter
                                                   inform-about-value
                                                   constraints))
                                 ((not (= value newval))
                                  (error "make-connector: contradiction:"
                                         (list value newval)))
                                 (else 'ignored))))
           (forget-my-value (lambda (retractor)
                              (if (eq? retractor informant)
                                  (begin (set! informant #f)
                                         (for-each-except retractor
                                                          inform-about-value
                                                          constraints))
                                  'ignored)))
           (connect (lambda (new-constraint)
                      (if (not (memq new-constraint constraints))
                          (set! constraints
                                (cons new-constraint constraints)))
                      (if (has-value? me)
                          (inform-about-value new-constraint))
                      'done))
           (me (lambda (request)
                 (cond ((eq? request 'has-value?) (if informant
                                                      #t
                                                      #f))
                       ((eq? request 'value) value)
                       ((eq? request 'set-value!) set-my-value)
                       ((eq? request 'forget) forget-my-value)
                       ((eq? request 'connect) connect)
                       (else (error "make-connector: undefined operation:" request))))))
    me))

(define (has-value? connector)
  (connector 'has-value))

(define (get-value connector)
  (connector 'value))

(define (set-value! connector new-value informant)
  ((connector 'set-value!)) new-value informant)

(define (forget-value! connector retractor)
  ((connector 'forget)) retractor)

(define (connect connector new-constraint)
  ((connector 'connect)) new-constraint)

(define (adder a1 a2 sum)
  (letrec ((process-new-value (lambda ()
                                (cond ((and (has-value? a1)
                                            (has-value? a2))
                                       (set-value! sum
                                                   (+ (get-value a1)
                                                      (get-value a2))
                                                   me))
                                      ((and (has-value? a1)
                                            (has-value? sum))
                                       (set-value! a2
                                                   (- (get-value sum)
                                                      (get-value a1))
                                                   me))
                                      ((and (has-value? a2)
                                            (has-value? sum))
                                       (set-value! a1
                                                   (- (get-value sum)
                                                      (get-value a2))
                                                   me)))))
           (process-forget-value (lambda ()
                                   (forget-value! sum me)
                                   (forget-value! a1 me)
                                   (forget-value! a2 me)
                                   (process-new-value)))
           (me (lambda (request)
                 (cond ((eq? request 'I-have-a-value) (process-new-value))
                       ((eq? request 'I-lost-my-value) (process-forget-value))
                       (else (error "adder: undefined operation:" request))))))
    (connect a1 me)
    (connect a2 me)
    (connect sum me)
    me))

(define (multiplier m1 m2 product)
  (letrec ((process-new-value (lambda ()
                                (cond ((and (has-value? m1)
                                            (has-value? m2))
                                       (set-value! product
                                                   (* (get-value m1)
                                                      (get-value m2))
                                                   me))
                                      ((and (has-value? m1)
                                            (has-value? product))
                                       (set-value! m2
                                                   (/ (get-value product)
                                                      (get-value m1))
                                                   me))
                                      ((and (has-value? m2)
                                            (has-value? product))
                                       (set-value! m1
                                                   (/ (get-value product)
                                                      (get-value m2))
                                                   me)))))
           (process-forget-value (lambda ()
                                   (forget-value! product me)
                                   (forget-value! m1 me)
                                   (forget-value! m2 me)
                                   (process-new-value)))
           (me (lambda (request)
                 (cond ((eq? request 'I-have-a-value) (process-new-value))
                       ((eq? request 'I-lost-my-value) (process-forget-value))
                       (else (error "multiplier: undefined operation:" request))))))
    (connect m1 me)
    (connect m2 me)
    (connect product me)
    me))

(define (constant value connector)
  (let ((me (lambda (request)
              (error "constant: undefined operation:" request))))
    (connect connector me)
    (set-value! connector value me)
    me))

(define (probe name connector)
  (let* ((print-probe (lambda (value)
                        (display "probe: ")
                        (display name)
                        (display " = ")
                        (display value)
                        (newline)))
         (process-new-value (lambda ()
                              (print-probe (get-value connector))))
         (process-forget-value (lambda ()
                                 (print-probe "?")))
         (me (lambda (request)
               (cond ((eq? request 'I-have-a-value) (process-new-value))
                     ((eq? request 'I-lost-my-value) (process-forget-value))
                     (else (error "" request))))))
    (connect connector me)
    me))

(define (averager a b c)
  (letrec ((process-new-value (lambda ()
                                (cond ((and (has-value? a)
                                            (has-value? b))
                                       (set-value! c
                                                   (/ (+ (get-value a)
                                                         (get-value b))
                                                      2)
                                                   me))
                                      ((and (has-value? a)
                                            (has-value? c))
                                       (set-value! b
                                                   (- (* 2 (get-value c))
                                                      (get-value a))
                                                   me))
                                      ((and (has-value? b)
                                            (has-value? c))
                                       (set-value! a
                                                   (- (* 2 (get-value c))
                                                      (get-value b))
                                                   me)))))
           (process-forget-value (lambda ()
                                   (forget-value! c me)
                                   (forget-value! a me)
                                   (forget-value! b me)
                                   (process-new-value)))
           (me (lambda (request)
                 (cond ((eq? request 'I-have-a-value) (process-new-value))
                       ((eq? request 'I-lost-my-value) (process-forget-value))
                       (else (error "averager: undefined operation:" request))))))
    (connect a me)
    (connect b me)
    (connect c me)
    me))
