With explicit dispatch, we need to define a new procedure with a unique name for
each type. This name should ideally be composed of a prefix indicating type
followed by the procedure name, such as foo-print or bar-insert. In the data-
directed style, we can define procedures locally and insert them into a table in
visible scope for the caller. Within the body of foo, we would define the
procedure print and then (put 'foo 'print print) to make the procedure available
with (get 'foo 'print). In the message-passing style, instead of using a table,
we issue a dispatch procedure as the result of make-foo or make-bar. To print
foo, we would (define foo (make-foo)) and call ((foo 'print)).

If we must frequently add new types, the message-passing style might be most
appropriate, because we can use a "copy and paste" method of programming where
all operations for the new type have an existing blueprint that can be modified
as necessary. If we must frequently add new operations, the data-directed style
might be most appropriate, because we can define the new operation in one place
and add it to multiple types. However, there is no paradigm of software design
that is obviously superior to the others for a given situation. Often, several
styles are used within the same program to create software with the best
overall characteristics of simplicity, clarity, and performance.
