#lang sicp

(define (equal? x y)
  (cond ((or (null? x)
             (null? y))
         (and (null? x)
              (null? y)))
        ((not (pair? x))
         (and (not (pair? y))
              (or (and (number? x)
                       (number? y)
                       (= x y))
                  (eq? x y))))
        ((not (pair? (car x)))
         (and (pair? y)
              (not (pair? (car y)))
              (or (and (number? (car x))
                       (number? (car y))
                       (= (car x) (car y)))
                  (eq? (car x) (car y)))
              (equal? (cdr x) (cdr y))))
        (else (and (equal? (car x) (car y))
                   (equal? (cdr x) (cdr y))))))

(define (displayln x)
  (display x)
  (newline))

(for-each (lambda (p)
            (displayln (equal? (car p)
                               (cdr p))))
          (list (cons '(a (b c ((d e) f) (g) h))
                      '(a (b c ((d e) f) (g) h)))
                (cons '(1 2 (3 (4 5 (6 7 8))))
                      '(1 2 (3 (4 5 (6 7 8)))))
                (cons '(a (b c ((d e) f) (g) h))
                      '(1 2 (3 (4 5 (6 7 8)))))))
;; #t
;; #t
;; #f
