#lang racket/base

(require rackunit
         "main.rkt")

(test-case
 "integers"
 (for ((i (in-range 5)))
   (let ((a (random 10))
         (b (random 10)))
     (check-equal? (add (make-integer a)
                        (make-integer b))
                   (make-integer (+ a b)))
     (check-equal? (sub (make-integer a)
                        (make-integer b))
                   (make-integer (- a b)))
     (check-equal? (mul (make-integer a)
                        (make-integer b))
                   (make-integer (* a b)))
     (check-equal? (div (make-integer a)
                        (make-integer b))
                   (simplify (make-rational a b))))))

(test-case
 "rational numbers"
 (for ((i (in-range 5)))
   (let ((a (random 10))
         (b (random 1 10))
         (c (random 10))
         (d (random 1 10)))
     (check-equal? (add (make-rational a b)
                        (make-rational c d))
                   (simplify (make-rational (+ (* a d) (* c b))
                                            (* b d))))
     (check-equal? (sub (make-rational a b)
                        (make-rational c d))
                   (simplify (make-rational (- (* a d) (* c b))
                                            (* b d))))
     (check-equal? (mul (make-rational a b)
                        (make-rational c d))
                   (simplify (make-rational (* a c)
                                            (* b d))))
     (check-equal? (div (make-rational a b)
                        (make-rational c d))
                   (simplify (make-rational (* a d)
                                            (* b c)))))))

(test-case
 "real numbers"
 (for ((i (in-range 5)))
   (let ((a (* 10 (random)))
         (b (* 10 (random))))
     (check-equal? (add (make-real a)
                        (make-real b))
                   (simplify (make-real (+ a b))))
     (check-equal? (sub (make-real a)
                        (make-real b))
                   (simplify (make-real (- a b))))
     (check-equal? (mul (make-real a)
                        (make-real b))
                   (simplify (make-real (* a b))))
     (check-equal? (div (make-real a)
                        (make-real b))
                   (simplify (make-real (/ a b)))))))

(test-case
 "complex numbers"
 (for ((i (in-range 5)))
   (let ((a (* 10 (random)))
         (b (* 10 (random)))
         (c (* 10 (random)))
         (d (* 10 (random))))
     (check-equal? (add (make-rectangular a b)
                        (make-rectangular c d))
                   (simplify (make-rectangular (+ a c)
                                               (+ b d))))
     (check-equal? (sub (make-rectangular a b)
                        (make-rectangular c d))
                   (simplify (make-rectangular (- a c)
                                               (- b d))))
     (check-equal? (mul (make-rectangular a b)
                        (make-rectangular c d))
                   (simplify (make-polar (* (sqrt (+ (* a a) (* b b)))
                                            (sqrt (+ (* c c) (* d d))))
                                         (+ (atan a b)
                                            (atan c d)))))
     (check-equal? (div (make-rectangular a b)
                        (make-rectangular c d))
                   (simplify (make-polar (/ (sqrt (+ (* a a) (* b b)))
                                            (sqrt (+ (* c c) (* d d))))
                                         (- (atan a b)
                                            (atan c d))))))))
