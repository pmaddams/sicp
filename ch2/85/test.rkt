#lang racket/base

(require rackunit
         "main.rkt")

(test-case
 "integers"
 (for ((i (in-range 5)))
   (let ((a (random 1 10))
         (b (random 1 10)))
     (check-equal? (add (make-integer a)
                        (make-integer b))
                   (make-integer (+ a b)))
     (check-equal? (sub (make-integer a)
                        (make-integer b))
                   (make-integer (- a b)))
     (check-equal? (mul (make-integer a)
                        (make-integer b))
                   (make-integer (* a b)))
     (check-equal? (div (make-integer a)
                        (make-integer b))
                   (simplify (make-rational a b))))))

(test-case
 "rational numbers"
 (for ((i (in-range 5)))
   (let ((a (random 1 10))
         (b (random 1 10))
         (c (random 1 10))
         (d (random 1 10)))
     (check-equal? (add (make-rational a b)
                        (make-rational c d))
                   (simplify (make-rational (+ (* a d) (* b c))
                                            (* b d))))
     (check-equal? (sub (make-rational a b)
                        (make-rational c d))
                   (simplify (make-rational (- (* a d) (* b c))
                                            (* b d))))
     (check-equal? (mul (make-rational a b)
                        (make-rational c d))
                   (simplify (make-rational (* a c)
                                            (* b d))))
     (check-equal? (div (make-rational a b)
                        (make-rational c d))
                   (simplify (make-rational (* a d)
                                            (* b c)))))))

(test-case
 "real numbers"
 (for ((i (in-range 5)))
   (let ((a (* 10 (random)))
         (b (* 10 (random))))
     (check-equal? (add (make-real a)
                        (make-real b))
                   (simplify (make-real (+ a b))))
     (check-equal? (sub (make-real a)
                        (make-real b))
                   (simplify (make-real (- a b))))
     (check-equal? (mul (make-real a)
                        (make-real b))
                   (simplify (make-real (* a b))))
     (check-equal? (div (make-real a)
                        (make-real b))
                   (simplify (make-real (/ a b)))))))

(test-case
 "complex numbers"
 (for ((i (in-range 5)))
   (let ((a (* 10 (random)))
         (b (* 10 (random)))
         (c (* 10 (random)))
         (d (* 10 (random))))
     (check-equal? (add (make-rectangular a b)
                        (make-rectangular c d))
                   (simplify (make-rectangular (+ a c)
                                               (+ b d))))
     (check-equal? (sub (make-rectangular a b)
                        (make-rectangular c d))
                   (simplify (make-rectangular (- a c)
                                               (- b d))))
     (check-equal? (mul (make-rectangular a b)
                        (make-rectangular c d))
                   (simplify (make-polar (* (sqrt (+ (* a a) (* b b)))
                                            (sqrt (+ (* c c) (* d d))))
                                         (+ (atan a b)
                                            (atan c d)))))
     (check-equal? (div (make-rectangular a b)
                        (make-rectangular c d))
                   (simplify (make-polar (/ (sqrt (+ (* a a) (* b b)))
                                            (sqrt (+ (* c c) (* d d))))
                                         (- (atan a b)
                                            (atan c d))))))))

(test-case
 "generic operations"
 (for ((i (in-range 5)))
   (let ((a (random 1 10))
         (b (random 1 10))
         (c (random 1 10))
         (d (* 10 (random)))
         (e (* 10 (random)))
         (f (* 10 (random))))
     (check-equal? (add (make-integer a)
                        (make-rational b c))
                   (add (make-rational a 1)
                        (make-rational b c)))
     (check-equal? (sub (make-rational c a)
                        (make-integer b))
                   (sub (make-rational c a)
                        (make-rational b 1)))
     (check-equal? (mul (make-integer c)
                        (make-rational a b))
                   (mul (make-rational c 1)
                        (make-rational a b)))
     (check-equal? (div (make-rational b c)
                        (make-integer a))
                   (div (make-rational b c)
                        (make-rational a 1)))
     (check-equal? (add (make-rational a b)
                        (make-real d))
                   (add (make-real (/ a b))
                        (make-real d)))
     (check-equal? (sub (make-real e)
                        (make-rational b c))
                   (sub (make-real e)
                        (make-real (/ b c))))
     (check-equal? (mul (make-rational c a)
                        (make-real f))
                   (mul (make-real (/ c a))
                        (make-real f)))
     (check-equal? (div (make-real d)
                        (make-rational a b))
                   (div (make-real d)
                        (make-real (/ a b))))
     (check-equal? (add (make-real d)
                        (make-rectangular e f))
                   (add (make-rectangular d 0.0)
                        (make-rectangular e f)))
     (check-equal? (sub (make-rectangular f d)
                        (make-real e))
                   (sub (make-rectangular f d)
                        (make-rectangular e 0.0)))
     (check-equal? (mul (make-real f)
                        (make-rectangular d e))
                   (mul (make-rectangular f 0.0)
                        (make-rectangular d e)))
     (check-equal? (div (make-real d)
                        (make-rectangular e f))
                   (div (make-rectangular d 0.0)
                        (make-rectangular e f))))))

(test-case
 "repeated"
 (for ((n (in-range 5)))
   (check-equal? ((repeated add1 n) 0) n)
   (check-equal? ((repeated (lambda (x) (expt x 2)) n) 2)
                 (expt 2 (expt 2 n)))))
