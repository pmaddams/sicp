#lang sicp

(define (filtered-accumulate test? combiner null-value term a next b)
  (letrec ((p (lambda (a result)
                (cond ((> a b) result)
                      ((test? a) (p (next a) (combiner (term a) result)))
                      (else (p (next a) result))))))
    (p a null-value)))

(define (square x)
  (expt x 2))

(define (prime? n)
  (letrec ((miller-rabin (lambda (n)
                           (letrec ((a (inc (random (dec n))))
                                    (a-expmod-n (lambda (exp)
                                                  (cond ((zero? exp) 1)
                                                        ((even? exp)
                                                         (let* ((x (a-expmod-n (/ exp 2)))
                                                                (y (remainder (square x) n)))
                                                           (if (and (= y 1)
                                                                    (not (= x 1))
                                                                    (not (= x (dec n))))
                                                               0
                                                               y)))
                                                        (else (remainder (* a (a-expmod-n (dec exp)))
                                                                         n))))))
                             (= 1 (a-expmod-n (dec n))))))
           (p (lambda (times)
                (cond ((zero? times) #t)
                      ((miller-rabin n) (p (dec times)))
                      (else #f)))))
    (cond ((<= n 1) #f)
          ((= n 2) #t)
          ((even? n) #f)
          (else (p 10)))))

(define (sum-of-squared-primes a b)
  (filtered-accumulate prime? + 0 square a inc b))

(define (product-relatively-prime-less-than n)
  (letrec ((gcd (lambda (a b)
                  (if (zero? b)
                      a
                      (gcd b (remainder a b)))))
           (test? (lambda (x)
                    (= 1 (gcd x n)))))
    (filtered-accumulate test? * 1 identity 2 inc (dec n))))